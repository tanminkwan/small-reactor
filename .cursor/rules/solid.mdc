---
description: SOLID 원칙을 준수하는 개발 가이드라인
globs: ["**/*.ts", "**/*.js", "**/*.tsx", "**/*.jsx", "**/*.py", "**/*.java", "**/*.cs", "**/*.cpp", "**/*.c"]
alwaysApply: true
---

# SOLID 원칙 준수 가이드라인

## 1. Single Responsibility Principle (SRP) - 단일 책임 원칙
- 각 클래스/모듈은 하나의 책임만 가져야 합니다
- 클래스가 변경되는 이유는 하나여야 합니다
- 관련 없는 기능들을 분리하세요

## 2. Open/Closed Principle (OCP) - 개방/폐쇄 원칙
- 확장에는 열려있고, 수정에는 닫혀있어야 합니다
- 새로운 기능 추가 시 기존 코드를 수정하지 않고 확장하세요
- 인터페이스와 추상화를 활용하세요

## 3. Liskov Substitution Principle (LSP) - 리스코프 치환 원칙
- 하위 타입은 상위 타입을 완전히 대체할 수 있어야 합니다
- 상속받은 클래스는 부모 클래스의 계약을 준수해야 합니다
- 예외를 던지거나 예상치 못한 동작을 하면 안 됩니다

## 4. Interface Segregation Principle (ISP) - 인터페이스 분리 원칙
- 클라이언트는 사용하지 않는 인터페이스에 의존하면 안 됩니다
- 큰 인터페이스보다는 작고 구체적인 인터페이스를 선호하세요
- 필요한 메서드만 포함하는 인터페이스를 설계하세요

## 5. Dependency Inversion Principle (DIP) - 의존성 역전 원칙
- 고수준 모듈은 저수준 모듈에 의존하면 안 됩니다
- 둘 다 추상화에 의존해야 합니다
- 구체적인 구현보다는 추상화에 의존하세요

## 코드 리뷰 체크리스트
- [ ] 각 클래스가 단일 책임을 가지는가?
- [ ] 새로운 기능 추가 시 기존 코드 수정이 필요한가?
- [ ] 상속 관계에서 치환 가능성이 보장되는가?
- [ ] 인터페이스가 필요한 기능만 포함하는가?
- [ ] 의존성이 추상화를 통해 관리되는가?
